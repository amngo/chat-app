import RoomHeader from "components/RoomHeader";
import RoomInput from "components/RoomInput";
import RoomMessages from "components/RoomMessages";
import UserList from "components/UserList";
import { NextPageContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";
import useStore from "store/useStore";

interface Props {
  id: string;
}

let socket: Socket;

const ENDPOINT: string =
  process.env.NEXT_PUBLIC_ENDPOINT || "http://localhost:5000";

function Room({ id }: Props) {
  const router = useRouter();
  const [messages, setMessages] = useState<any>([
    {
      id: "9999",
      user: "admin",
      text: "Connecting to the server...",
    },
  ]);
  const [userList, setUserList] = useState<any>([]);
  const { data } = useStore((state) => state);

  // establish socket connection
  useEffect(() => {
    socket = io(ENDPOINT);
    socket.emit(
      "join",
      { name: data.name, room: id, avatar: data.avatar },
      (error: any) => {
        if (error) {
          router.push("/");
        }
      },
    );

    return () => {
      socket.close();
    };
  }, []);

  useEffect(() => {
    socket.on("roomData", ({ users }) => {
      console.log({ users });
      setUserList(users);
    });

    socket.on("message", (message) => {
      console.log({ message, messages });
      setMessages([...messages, message]);
    });
    return () => {
      socket.off("roomData");
      socket.off("message");
    };
  }, [messages]);

  const sendMessage = (message: string) => {
    socket.emit("sendMessage", message);
  };

  return (
    <div className="flex h-screen">
      <Head>
        <title>ChatApp - {id}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <UserList users={userList} />
      <div className="flex flex-col justify-between w-full">
        <RoomHeader id={id} />
        <RoomMessages messages={messages} />
        <RoomInput sendMessage={sendMessage} />
      </div>
    </div>
  );
}

export default Room;

Room.getInitialProps = async (appContext: NextPageContext): Promise<Props> => {
  return { id: appContext.query.id as string };
};
